{"ast":null,"code":"//const API_URL = \"http://localhost:8080/api/auth/\";\nclass AuthService {\n  getCurrentUser() {\n    const user = sessionStorage.getItem('user');\n\n    if (user === 'undefined' || !user) {\n      return null;\n    } else {\n      return user;\n    }\n  }\n\n  getToken() {\n    return sessionStorage.getItem('jwtToken');\n  }\n\n  setUserSession(username, token) {\n    sessionStorage.setItem('user', username);\n    sessionStorage.setItem('jwtToken', token);\n  }\n\n  setTotalBudget(budget) {\n    sessionStorage.setItem('budget', budget);\n  }\n\n  getTotalBudget() {\n    return sessionStorage.getItem('budget');\n  }\n\n  setAllCategories(allCategories) {\n    sessionStorage.setItem('allCategories', allCategories);\n  }\n\n  getCategoryBudget(categoryName) {\n    const all = sessionStorage.getItem(\"allCategories\");\n    console.log(all);\n    return all.filter(e => {\n      return e.categoryName == categoryName;\n    });\n  }\n\n  resetUserSession() {\n    sessionStorage.removeItem('user');\n    sessionStorage.removeItem('jwtToken');\n  }\n  /*login(username, password) {\n       const requestBody = {\n          username: username,\n          password: password\n      }\n       axios.post('/login', requestBody).then((response) => {\n          setUserSession(response.data.username, response.data.authToken, response.data.newUser);\n          console.log(\"newUser: \" + response.data.newUser);\n          props.authenticate();\n          navigate('/portfolio');\n      }).catch((error) => {\n          console.log('Error ' + error.toJSON())\n          console.log(error.response)\n          setMessage(error.response.data.errorMessage.split('] ')[1]);\n      })\n      /!*const userResponse = await fetch(`/users/${name}?password=${pass}`);\n      const userBody = await userResponse.json();\n       console.log(userBody);\n       if (userBody.user === undefined) {\n          alert(\"Invalid Username or Password. Please try again.\")\n      } else {\n          //routeChange();\n      }*!/\n       /!*return axios\n          .post(API_URL + \"signin\", {\n              username,\n              password\n          })\n          .then(response => {\n              if (response.data.jwtToken) {\n                  localStorage.setItem(\"user\", JSON.stringify(response.data));\n              }\n              return response.data;\n          });*!/\n  }\n   logout() {\n      localStorage.removeItem(\"user\");\n  }\n   register(username, email, password) {\n      return axios.post(API_URL + \"signup\", {\n          username,\n          email,\n          password\n      });\n  }*/\n\n\n}\n\nexport default new AuthService();","map":{"version":3,"names":["AuthService","getCurrentUser","user","sessionStorage","getItem","getToken","setUserSession","username","token","setItem","setTotalBudget","budget","getTotalBudget","setAllCategories","allCategories","getCategoryBudget","categoryName","all","console","log","filter","e","resetUserSession","removeItem"],"sources":["/Users/pooja/lambda/Spring Projects/expensetracker/expenseapp/src/services/auth.service.js"],"sourcesContent":["\n//const API_URL = \"http://localhost:8080/api/auth/\";\n\nclass AuthService {\n    getCurrentUser() {\n        const user = sessionStorage.getItem('user');\n        if(user === 'undefined' || !user) {\n            return null;\n        } else {\n            return user;\n        }\n    }\n\n    getToken() {\n        return sessionStorage.getItem('jwtToken');\n    }\n\n    setUserSession(username, token) {\n        sessionStorage.setItem('user', username);\n        sessionStorage.setItem('jwtToken', token);\n    }\n\n    setTotalBudget(budget) {\n        sessionStorage.setItem('budget', budget);\n    }\n\n    getTotalBudget() {\n        return sessionStorage.getItem('budget');\n    }\n\n    setAllCategories(allCategories) {\n        sessionStorage.setItem('allCategories', allCategories);\n    }\n\n    getCategoryBudget(categoryName) {\n        const all = sessionStorage.getItem(\"allCategories\");\n        console.log(all);\n        return all.filter(e => {\n            return e.categoryName == categoryName\n        });\n    }\n\n    resetUserSession() {\n        sessionStorage.removeItem('user');\n        sessionStorage.removeItem('jwtToken');\n    }\n\n    /*login(username, password) {\n\n        const requestBody = {\n            username: username,\n            password: password\n        }\n\n        axios.post('/login', requestBody).then((response) => {\n            setUserSession(response.data.username, response.data.authToken, response.data.newUser);\n            console.log(\"newUser: \" + response.data.newUser);\n            props.authenticate();\n            navigate('/portfolio');\n        }).catch((error) => {\n            console.log('Error ' + error.toJSON())\n            console.log(error.response)\n            setMessage(error.response.data.errorMessage.split('] ')[1]);\n        })\n        /!*const userResponse = await fetch(`/users/${name}?password=${pass}`);\n        const userBody = await userResponse.json();\n\n        console.log(userBody);\n\n        if (userBody.user === undefined) {\n            alert(\"Invalid Username or Password. Please try again.\")\n        } else {\n            //routeChange();\n        }*!/\n\n        /!*return axios\n            .post(API_URL + \"signin\", {\n                username,\n                password\n            })\n            .then(response => {\n                if (response.data.jwtToken) {\n                    localStorage.setItem(\"user\", JSON.stringify(response.data));\n                }\n                return response.data;\n            });*!/\n    }\n\n    logout() {\n        localStorage.removeItem(\"user\");\n    }\n\n    register(username, email, password) {\n        return axios.post(API_URL + \"signup\", {\n            username,\n            email,\n            password\n        });\n    }*/\n\n}\nexport default new AuthService();\n\n\n\n"],"mappings":"AACA;AAEA,MAAMA,WAAN,CAAkB;EACdC,cAAc,GAAG;IACb,MAAMC,IAAI,GAAGC,cAAc,CAACC,OAAf,CAAuB,MAAvB,CAAb;;IACA,IAAGF,IAAI,KAAK,WAAT,IAAwB,CAACA,IAA5B,EAAkC;MAC9B,OAAO,IAAP;IACH,CAFD,MAEO;MACH,OAAOA,IAAP;IACH;EACJ;;EAEDG,QAAQ,GAAG;IACP,OAAOF,cAAc,CAACC,OAAf,CAAuB,UAAvB,CAAP;EACH;;EAEDE,cAAc,CAACC,QAAD,EAAWC,KAAX,EAAkB;IAC5BL,cAAc,CAACM,OAAf,CAAuB,MAAvB,EAA+BF,QAA/B;IACAJ,cAAc,CAACM,OAAf,CAAuB,UAAvB,EAAmCD,KAAnC;EACH;;EAEDE,cAAc,CAACC,MAAD,EAAS;IACnBR,cAAc,CAACM,OAAf,CAAuB,QAAvB,EAAiCE,MAAjC;EACH;;EAEDC,cAAc,GAAG;IACb,OAAOT,cAAc,CAACC,OAAf,CAAuB,QAAvB,CAAP;EACH;;EAEDS,gBAAgB,CAACC,aAAD,EAAgB;IAC5BX,cAAc,CAACM,OAAf,CAAuB,eAAvB,EAAwCK,aAAxC;EACH;;EAEDC,iBAAiB,CAACC,YAAD,EAAe;IAC5B,MAAMC,GAAG,GAAGd,cAAc,CAACC,OAAf,CAAuB,eAAvB,CAAZ;IACAc,OAAO,CAACC,GAAR,CAAYF,GAAZ;IACA,OAAOA,GAAG,CAACG,MAAJ,CAAWC,CAAC,IAAI;MACnB,OAAOA,CAAC,CAACL,YAAF,IAAkBA,YAAzB;IACH,CAFM,CAAP;EAGH;;EAEDM,gBAAgB,GAAG;IACfnB,cAAc,CAACoB,UAAf,CAA0B,MAA1B;IACApB,cAAc,CAACoB,UAAf,CAA0B,UAA1B;EACH;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAxFkB;;AAkGlB,eAAe,IAAIvB,WAAJ,EAAf"},"metadata":{},"sourceType":"module"}