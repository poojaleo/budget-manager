[{"/Users/pooja/lambda/Spring Projects/expensetracker/expenseapp/src/index.js":"1","/Users/pooja/lambda/Spring Projects/expensetracker/expenseapp/src/App.js":"2","/Users/pooja/lambda/Spring Projects/expensetracker/expenseapp/src/reportWebVitals.js":"3","/Users/pooja/lambda/Spring Projects/expensetracker/expenseapp/src/services/auth.service.js":"4","/Users/pooja/lambda/Spring Projects/expensetracker/expenseapp/src/components/NavBar/HomeNavbar.js":"5","/Users/pooja/lambda/Spring Projects/expensetracker/expenseapp/src/components/Profile/login.js":"6","/Users/pooja/lambda/Spring Projects/expensetracker/expenseapp/src/components/Profile/home.js":"7","/Users/pooja/lambda/Spring Projects/expensetracker/expenseapp/src/components/Profile/signup.js":"8","/Users/pooja/lambda/Spring Projects/expensetracker/expenseapp/src/components/Profile/profile.js":"9","/Users/pooja/lambda/Spring Projects/expensetracker/expenseapp/src/components/NavBar/LoginButton.js":"10","/Users/pooja/lambda/Spring Projects/expensetracker/expenseapp/src/components/NavBar/SignupButton.js":"11","/Users/pooja/lambda/Spring Projects/expensetracker/expenseapp/src/components/Category/Category.js":"12","/Users/pooja/lambda/Spring Projects/expensetracker/expenseapp/src/components/Category/CategoryButton.js":"13","/Users/pooja/lambda/Spring Projects/expensetracker/expenseapp/src/components/Expense/ExpenseButton.js":"14","/Users/pooja/lambda/Spring Projects/expensetracker/expenseapp/src/components/Profile/ProfileButton.js":"15","/Users/pooja/lambda/Spring Projects/expensetracker/expenseapp/src/components/Category/CategoryCard.js":"16","/Users/pooja/lambda/Spring Projects/expensetracker/expenseapp/src/components/utils/utils.js":"17","/Users/pooja/lambda/Spring Projects/expensetracker/expenseapp/src/components/Category/CreateCategoryModal.js":"18","/Users/pooja/lambda/Spring Projects/expensetracker/expenseapp/src/components/Category/UpdateCategoryModal.js":"19","/Users/pooja/lambda/Spring Projects/expensetracker/expenseapp/src/components/Expense/Expense.js":"20","/Users/pooja/lambda/Spring Projects/expensetracker/expenseapp/src/components/Expense/ExpenseCard.js":"21","/Users/pooja/lambda/Spring Projects/expensetracker/expenseapp/src/components/Expense/CreateExpenseModal.js":"22","/Users/pooja/lambda/Spring Projects/expensetracker/expenseapp/src/components/Expense/ViewExpenseModal.js":"23","/Users/pooja/lambda/Spring Projects/expensetracker/expenseapp/src/components/NavBar/SignoutButton.js":"24"},{"size":577,"mtime":1651366977054,"results":"25","hashOfConfig":"26"},{"size":2401,"mtime":1651706524019,"results":"27","hashOfConfig":"26"},{"size":362,"mtime":1651366842754,"results":"28","hashOfConfig":"26"},{"size":2745,"mtime":1651621976896,"results":"29","hashOfConfig":"26"},{"size":622,"mtime":1651701973528,"results":"30","hashOfConfig":"26"},{"size":3620,"mtime":1651706831161,"results":"31","hashOfConfig":"26"},{"size":1503,"mtime":1651704085746,"results":"32","hashOfConfig":"26"},{"size":5337,"mtime":1651707254130,"results":"33","hashOfConfig":"26"},{"size":5631,"mtime":1651704670135,"results":"34","hashOfConfig":"26"},{"size":418,"mtime":1651701723732,"results":"35","hashOfConfig":"26"},{"size":424,"mtime":1651701756275,"results":"36","hashOfConfig":"26"},{"size":5570,"mtime":1651707753807,"results":"37","hashOfConfig":"26"},{"size":444,"mtime":1651536331496,"results":"38","hashOfConfig":"26"},{"size":435,"mtime":1651536351541,"results":"39","hashOfConfig":"26"},{"size":434,"mtime":1651538589814,"results":"40","hashOfConfig":"26"},{"size":1742,"mtime":1651705357456,"results":"41","hashOfConfig":"26"},{"size":214,"mtime":1651690406434,"results":"42","hashOfConfig":"26"},{"size":3090,"mtime":1651696190015,"results":"43","hashOfConfig":"26"},{"size":2637,"mtime":1651696176399,"results":"44","hashOfConfig":"26"},{"size":6797,"mtime":1651707790370,"results":"45","hashOfConfig":"26"},{"size":1643,"mtime":1651706226089,"results":"46","hashOfConfig":"26"},{"size":5213,"mtime":1651696129679,"results":"47","hashOfConfig":"26"},{"size":6092,"mtime":1651696102980,"results":"48","hashOfConfig":"26"},{"size":527,"mtime":1651705871900,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},"7w9r3j",{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57"},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64"},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68"},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78"},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82"},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","suppressedMessages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92"},{"filePath":"93","messages":"94","suppressedMessages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"96","messages":"97","suppressedMessages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"99","messages":"100","suppressedMessages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"102","messages":"103","suppressedMessages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105"},{"filePath":"106","messages":"107","suppressedMessages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","suppressedMessages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112"},{"filePath":"113","messages":"114","suppressedMessages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116"},{"filePath":"117","messages":"118","suppressedMessages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120"},{"filePath":"121","messages":"122","suppressedMessages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"124","messages":"125","suppressedMessages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127"},{"filePath":"128","messages":"129","suppressedMessages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131"},{"filePath":"132","messages":"133","suppressedMessages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/pooja/lambda/Spring Projects/expensetracker/expenseapp/src/index.js",[],[],[],"/Users/pooja/lambda/Spring Projects/expensetracker/expenseapp/src/App.js",["135","136","137"],[],"import React, {useEffect, useState} from \"react\";\nimport {Route, Routes, Switch} from \"react-router-dom\";\nimport Home from \"./components/Profile/home\";\nimport Login from \"./components/Profile/login\";\nimport Signup from \"./components/Profile/signup\";\nimport Profile from \"./components/Profile/profile\";\nimport Category from \"./components/Category/Category\";\nimport AuthService from \"./services/auth.service\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Expense from \"./components/Expense/Expense\";\n\nfunction App() {\n\n    const [isAuthentication, setAuthentication] = useState(null);\n    const [isTokenSet, setToken] = useState(AuthService.getToken);\n\n    useEffect(() => {\n        tokenAuthState();\n    })\n\n    const tokenAuthState = () => {\n        const token = AuthService.getToken();\n\n        if(token == undefined || token == null) {\n            setAuthentication(false);\n            setToken(token);\n        } else {\n            setToken(token);\n            setAuthentication(true);\n        }\n    }\n\n\n    return (\n        <div>\n            <Routes>\n                {isTokenSet && (\n                    <>\n                        <Route path={\"/\"} element={<Home/>} />\n                        <Route path={\"/home\"} element={<Home />} />\n                        <Route path={\"/login\"} element={<Login authenticate = {() => tokenAuthState()} />} />\n                        <Route path={\"/signup\"} element={<Signup />} />\n                        <Route path={\"/profile\"} element={<Profile />} />\n                        <Route path={\"/categories\"} element={<Category />} />\n                        <Route path={\"/expenses\"} element={<Expense />} />\n                    </>\n                )}\n\n                {!isTokenSet && (\n                    <>\n                        <Route path={\"/\"} element={<Home/>} />\n                        <Route path={\"/home\"} element={<Home />} />\n                        <Route path={\"/login\"} element={<Login authenticate = {() => tokenAuthState()} />} />\n                        <Route path={\"/signup\"} element={<Signup />} />\n                        <Route path={\"/profile\"} element={<Home />} />\n                        <Route path={\"/categories\"} element={<Home />} />\n                        <Route path={\"/expenses\"} element={<Home />} />\n                    </>\n                )}\n            </Routes>\n\n        </div>\n    )\n\n}\n\nexport default App;","/Users/pooja/lambda/Spring Projects/expensetracker/expenseapp/src/reportWebVitals.js",[],[],"/Users/pooja/lambda/Spring Projects/expensetracker/expenseapp/src/services/auth.service.js",["138"],[],"\n//const API_URL = \"http://localhost:8080/api/auth/\";\n\nclass AuthService {\n    getCurrentUser() {\n        const user = sessionStorage.getItem('user');\n        if(user === 'undefined' || !user) {\n            return null;\n        } else {\n            return user;\n        }\n    }\n\n    getToken() {\n        return sessionStorage.getItem('jwtToken');\n    }\n\n    setUserSession(username, token) {\n        sessionStorage.setItem('user', username);\n        sessionStorage.setItem('jwtToken', token);\n    }\n\n    setTotalBudget(budget) {\n        sessionStorage.setItem('budget', budget);\n    }\n\n    getTotalBudget() {\n        return sessionStorage.getItem('budget');\n    }\n\n    setAllCategories(allCategories) {\n        sessionStorage.setItem('allCategories', allCategories);\n    }\n\n    getCategoryBudget(categoryName) {\n        const all = sessionStorage.getItem(\"allCategories\");\n        console.log(all);\n        return all.filter(e => {\n            return e.categoryName == categoryName\n        });\n    }\n\n    resetUserSession() {\n        sessionStorage.removeItem('user');\n        sessionStorage.removeItem('jwtToken');\n    }\n\n    /*login(username, password) {\n\n        const requestBody = {\n            username: username,\n            password: password\n        }\n\n        axios.post('/login', requestBody).then((response) => {\n            setUserSession(response.data.username, response.data.authToken, response.data.newUser);\n            console.log(\"newUser: \" + response.data.newUser);\n            props.authenticate();\n            navigate('/portfolio');\n        }).catch((error) => {\n            console.log('Error ' + error.toJSON())\n            console.log(error.response)\n            setMessage(error.response.data.errorMessage.split('] ')[1]);\n        })\n        /!*const userResponse = await fetch(`/users/${name}?password=${pass}`);\n        const userBody = await userResponse.json();\n\n        console.log(userBody);\n\n        if (userBody.user === undefined) {\n            alert(\"Invalid Username or Password. Please try again.\")\n        } else {\n            //routeChange();\n        }*!/\n\n        /!*return axios\n            .post(API_URL + \"signin\", {\n                username,\n                password\n            })\n            .then(response => {\n                if (response.data.jwtToken) {\n                    localStorage.setItem(\"user\", JSON.stringify(response.data));\n                }\n                return response.data;\n            });*!/\n    }\n\n    logout() {\n        localStorage.removeItem(\"user\");\n    }\n\n    register(username, email, password) {\n        return axios.post(API_URL + \"signup\", {\n            username,\n            email,\n            password\n        });\n    }*/\n\n}\nexport default new AuthService();\n\n\n\n","/Users/pooja/lambda/Spring Projects/expensetracker/expenseapp/src/components/NavBar/HomeNavbar.js",["139","140","141","142"],[],"import React from \"react\";\nimport {Navbar, Container, Nav, NavLink} from \"reactstrap\";\nimport \"./HomeNavbar.css\";\nimport LoginButton from \"./LoginButton\";\nimport SignupButton from \"./SignupButton\";\n\nclass HomeNavbar extends React.Component {\n    render() {\n        return (\n            <div className={\"d-flex flex-row me-2 p-3 justify-content-end\"}>\n                <div className={\"me-2 p-2\"}>\n                    <LoginButton />\n                </div>\n               <div className={\"me-2 p-2\"}>\n                   <SignupButton />\n               </div>\n            </div>\n\n        )\n    }\n}\n\nexport default HomeNavbar;","/Users/pooja/lambda/Spring Projects/expensetracker/expenseapp/src/components/Profile/login.js",[],[],"/Users/pooja/lambda/Spring Projects/expensetracker/expenseapp/src/components/Profile/home.js",[],[],"/Users/pooja/lambda/Spring Projects/expensetracker/expenseapp/src/components/Profile/signup.js",["143","144","145","146"],[],"import React, {useState} from \"react\";\nimport {useNavigate} from \"react-router-dom\";\nimport axios from \"axios\";\nimport LoginButton from \"../NavBar/LoginButton\";\nimport {Button, Form, FormFeedback, FormGroup, FormText, Input, Label} from \"reactstrap\";\nimport SignupButton from \"../NavBar/SignupButton\";\n\nconst Signup = (props) => {\n    const [username, setUsername] = useState('');\n    const [password, setPassword] = useState('');\n    const [email, setEmail] = useState('');\n    const [validPassword, setValidPassword] = useState(false);\n    const [validEmail, setValidEmail] = useState(false);\n    const [signupSuccessful, setSignup] = useState(false);\n    const [message, setMessage] = useState('');\n    const navigate = useNavigate();\n\n    const handleUsernameChange = (event) => {\n        setUsername(event.target.value);\n    }\n\n    const handlePasswordChange = (event) => {\n        validatePassword(event);\n        setPasswordValue(event);\n    }\n\n    const validatePassword = (event) => {\n        const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/;\n\n        if(passwordRegex.test(event.target.value)) {\n            setValidPassword(true);\n        } else {\n            setValidPassword(false);\n        }\n\n    }\n\n    const setPasswordValue = (event) => {\n        setPassword(event.target.value);\n    }\n\n    const handleEmailChange = (event) => {\n        validateEmail(event);\n        setEmailValue(event);\n    }\n\n    const validateEmail = (event) => {\n        const emailRegex = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\n        if(emailRegex.test(event.target.value)) {\n            setValidEmail(true);\n        } else {\n            setValidEmail(false);\n        }\n    }\n\n    const setEmailValue = (event) => {\n        setEmail(event.target.value);\n    }\n\n\n    const successful = () => {\n\n        return (\n            <div>\n                {signupSuccessful ? (\n                    <div>\n                        <h3>{username} successfully registered!!</h3>\n                        <LoginButton />\n                    </div>\n                    ) :\n                    (\n                        <h3>Please try again!!</h3>\n                    )}\n\n            </div>\n        )\n    }\n\n\n\n    const handleFormSubmit = (event) => {\n        event.preventDefault();\n        setMessage(\"\");\n        const requestBody = {\n            \"username\": username,\n            \"password\": password,\n            \"emailAddress\": email\n        }\n\n        axios.post('/auth/signup', requestBody).then(response => {\n            console.log(response.data);\n            setSignup(true);\n        }).catch(error => {\n            // console.log('Error: ' + error.toJSON())\n            setSignup(false);\n            console.log(error.message);\n            setMessage(\"Looks like username or email already exists \");\n        })\n    }\n\n    return (\n        <div>\n            <div className={\"signin\"}>\n                <h4>Register</h4>\n                <Form className={\"form\"} onSubmit={handleFormSubmit}>\n                    <FormGroup>\n                        <Label htmlFor={\"username\"}>Username*</Label>\n                        <Input type={\"text\"} name={\"username\"} id={\"username\"} value={username}\n                               onChange={handleUsernameChange}/>\n                    </FormGroup>\n                    <FormGroup>\n                        <Label htmlFor={\"password\"}>Password*</Label>\n                        <Input type={\"password\"} name={\"password\"} id={\"password\"} value={password}\n                               valid={validPassword}\n                               invalid={!validPassword}\n                               onChange={handlePasswordChange}\n                        />\n                        <FormFeedback valid>\n                            Password meets the requirements.\n                        </FormFeedback>\n                        <FormText>Your password needs to be minimum 8 characters, 1 uppercase, 1 lowercase and 1 special character.</FormText>\n                    </FormGroup>\n                    <FormGroup>\n                        <Label htmlFor={\"email\"}>Email*</Label>\n                        <Input type={\"email\"} name={\"email\"} id={\"email\"} value={email}\n                               valid={validEmail}\n                               invalid={!validEmail}\n                               onChange={handleEmailChange}\n                        />\n\n                    </FormGroup>\n                    <Button>Signup</Button>\n                </Form>\n                <div>\n                    {message}\n                </div>\n                <div className={\"noAccount\"}>\n                    <h6>Already have an account. <LoginButton />\n                    </h6>\n                </div>\n            </div>\n\n            <div>\n            {signupSuccessful ? (\n                    <div className={\"text-center\"}>\n                        <h4>{username} successfully registered!!</h4>\n                        <h6>Go to the Login page to login</h6>\n                        <LoginButton />\n                    </div>\n                ) :\n                (\n                    <h3></h3>\n                )}\n\n        </div>\n\n\n        </div>\n    )\n}\n\nexport default Signup;","/Users/pooja/lambda/Spring Projects/expensetracker/expenseapp/src/components/Profile/profile.js",["147"],[],"import React, {useState, useEffect} from \"react\";\nimport {Form, Button, FormGroup, Container} from \"react-bootstrap\";\nimport {Input, Label} from \"reactstrap\";\nimport AuthService from \"../../services/auth.service\";\nimport axios from \"axios\";\nimport CategoryButton from \"../Category/CategoryButton\";\nimport ExpenseButton from \"../Expense/ExpenseButton\";\nimport \"./profile.css\";\nimport SignoutButton from \"../NavBar/SignoutButton\";\n\n\nconst Profile = (props) => {\n    const [username, setUsername] = useState('');\n    const [token, setToken] = useState('');\n    const [email, setEmailAddress] = useState('');\n    const [fullName, setFullName] = useState('');\n    const [monthlyBudget, setMonthlyBudget] = useState('');\n    const [monthlyIncome, setMonthlyIncome] = useState('');\n    const [message, setMessage] = useState('');\n\n    useEffect(() => {\n        tokenAuthState();\n    },[]);\n\n    const tokenAuthState = () => {\n        const token = AuthService.getToken();\n        const username = AuthService.getCurrentUser();\n\n        setToken(token);\n        setUsername(username);\n\n        const requestHeader = {\n            headers : {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": \"Bearer \" + token\n            }\n        }\n\n        const url = `/${username}`;\n\n\n        axios.get(url, requestHeader).then(response => {\n            console.log(response.data);\n            setEmailAddress(response.data.emailAddress);\n            setFullName(response.data.fullName);\n            setMonthlyIncome(response.data.monthlyIncome);\n            setMonthlyBudget(response.data.monthlyBudget);\n            AuthService.setTotalBudget(response.data.monthlyBudget);\n        }).catch(error => {\n            // console.log('Error: ' + error.toJSON())\n            console.log(error.message);\n        })\n\n    }\n\n    const handleFormSubmit = (event) => {\n        event.preventDefault();\n\n        const requestHeader = {\n            headers : {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": \"Bearer \" + token\n            }\n        }\n\n        const url = `/${username}`;\n\n        const requestBody = {\n            \"emailAddress\": email,\n            \"fullName\": fullName,\n            \"monthlyIncome\": monthlyIncome,\n            \"monthlyBudget\": monthlyBudget\n        }\n\n        axios.put(url, requestBody, requestHeader).then(response => {\n            console.log(response.data);\n            setMessage(\"Profile Successfully Updated.\")\n        }).catch(error => {\n            console.log(error.message);\n        })\n\n    }\n\n\n    const handleFullNameChange = (event) => {\n        event.preventDefault();\n        setFullName(event.target.value);\n    }\n\n    const handleIncomeChange = (event) => {\n        event.preventDefault();\n        setMonthlyIncome(event.target.value);\n    }\n\n    const handleBudgetChange = (event) => {\n        event.preventDefault();\n        setMonthlyBudget(event.target.value);\n    }\n\n\n\n\n    return (\n        <Container className=\"mt-5 mx-auto\">\n            <div className={\"profileHeader\"}>\n                <h2>Welcome to Expense Tracker App</h2>\n                <div className={\"buttons\"}>\n                    <div className={\"manage-buttons\"}>\n                        <SignoutButton />\n                    </div>\n                   <div className={\"manage-buttons\"}>\n                       <CategoryButton />\n                   </div>\n                    <div className={\"manage-buttons\"}>\n                        <ExpenseButton />\n                    </div>\n                </div>\n            </div>\n            <div className={\"px-4\"}>\n                <h4>Profile Page</h4>\n                <Form className={\"form\"} onSubmit={handleFormSubmit}>\n                    <FormGroup className={\"mb-3 col-xl-2\"}>\n                        <Label htmlFor={\"username\"}>Username</Label>\n                        <Input type={\"text\"} name={\"username\"} id={\"username\"} value={username} readOnly={true}/>\n                    </FormGroup>\n                    <FormGroup className={\"mb-3\"}>\n                        <Label htmlFor={\"email\"}>Email Address</Label>\n                        <Input type={\"email\"} name={\"email\"} id={\"email\"} value={email} readOnly={true}/>\n                    </FormGroup>\n                    <FormGroup className={\"mb-3\"}>\n                        <Label htmlFor={\"fullName\"}>Full Name</Label>\n                        <Input type={\"text\"} name={\"fullName\"} id={\"fullName\"} defaultValue={fullName}\n                               onChange={handleFullNameChange} />\n                    </FormGroup>\n                    <FormGroup className={\"mb-3\"}>\n                        <Label htmlFor={\"income\"}>Monthly Income</Label>\n                        <Input type={\"number\"} name={\"income\"} id={\"income\"} defaultValue={monthlyIncome}\n                               onChange={handleIncomeChange} />\n                    </FormGroup>\n                    <FormGroup className={\"mb-3\"}>\n                        <Label htmlFor={\"budget\"}>Monthly Budget</Label>\n                        <Input type={\"number\"} name={\"budget\"} id={\"budget\"} defaultValue={monthlyBudget}\n                               onChange={event => setMonthlyBudget(event.target.value)} />\n                    </FormGroup>\n                    <div className={\"d-flex justify-content-end\"}>\n                        <Button type={\"submit\"} variant={\"outline-success\"}>Update Profile</Button>\n                    </div>\n\n                </Form>\n                <p>\n                    {message}\n                </p>\n            </div>\n\n        </Container>\n    )\n}\n\nexport default Profile;","/Users/pooja/lambda/Spring Projects/expensetracker/expenseapp/src/components/NavBar/LoginButton.js",[],[],"/Users/pooja/lambda/Spring Projects/expensetracker/expenseapp/src/components/NavBar/SignupButton.js",[],[],"/Users/pooja/lambda/Spring Projects/expensetracker/expenseapp/src/components/Category/Category.js",["148","149","150","151","152","153","154","155","156"],[],"import React, {useState, useEffect} from \"react\";\nimport AuthService from \"../../services/auth.service\";\nimport axios from \"axios\";\nimport {Button, Card, FormGroup, Table, Form, Label, Input, Container} from \"reactstrap\";\nimport {Stack} from \"react-bootstrap\";\nimport \"./Category.css\";\nimport ProfileButton from \"../Profile/ProfileButton\";\nimport ExpenseButton from \"../Expense/ExpenseButton\";\nimport CategoryCard from \"./CategoryCard\";\nimport CreateCategoryModal from \"./CreateCategoryModal\";\nimport UpdateCategoryModal from \"./UpdateCategoryModal\";\nimport SignoutButton from \"../NavBar/SignoutButton\";\n\nconst Category = (props) => {\n    const [username, setUsername] = useState('');\n    const [token, setToken] = useState('');\n    const [emptyCategory, setEmptyCategory] = useState({categoryName: '', categoryBudget: ''});\n    const [allCategories, setAllCategories] = useState([]);\n    const [selectedCategory, setSelectedCategory] = useState({categoryName: '', categoryBudget: ''});\n    const [selectedCategoryName, setSelectedCategoryName] = useState(\"\");\n    const [selectedCategoryBudget, setSelectedCategoryBudget] = useState(\"\");\n    const [budget, setBudget] = useState('');\n    const [createModal, setCreateModal] = useState(false);\n    const [updateModal, setUpdateModal]  = useState(false);\n\n\n\n    useEffect(() => {\n        getAllCategories();\n    },[]);\n\n    const getAllCategories = () => {\n        const token = AuthService.getToken();\n        const username = AuthService.getCurrentUser();\n        const budget = AuthService.getTotalBudget();\n        setUsername(username);\n        setToken(token);\n        setBudget(budget);\n\n        const requestHeader = {\n            headers : {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": \"Bearer \" + token\n            }\n        }\n\n        const url = `/${username}/category`;\n\n        axios.get(url, requestHeader).then(response => {\n            console.log(response.data);\n            setAllCategories(response.data);\n            return response.data;\n        }).catch(error => {\n            console.log(error.message);\n        }).then(data => {\n            AuthService.setAllCategories(data);\n        })\n    }\n\n    const deleteCategory = (name) => {\n        const requestHeader = {\n            headers : {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": \"Bearer \" + token\n            }\n        }\n        const url = `/${username}/category/${name}`;\n\n        axios.delete(url, requestHeader).then(response => {\n            console.log(response.data);\n            window.location.reload();\n        }).catch(error => {\n            console.log(error.message);\n        })\n\n    }\n\n\n\n    const clickOnCreate = (event) => {\n        event.preventDefault();\n        setSelectedCategory(emptyCategory);\n        setCreateModal(true);\n        //TODo: remove setIsCreate\n    }\n\n\n\n    const openUpdateCategoryModal = (name, budget) => {\n\n        setSelectedCategoryName(name);\n        setSelectedCategoryBudget(budget);\n\n        setUpdateModal(true)\n\n    }\n\n    const categoryCards = allCategories?.map(category => {\n        return (\n            <div>\n\n               {CategoryCard(category.categoryName, category.categoryBudget, budget,\n                   () => openUpdateCategoryModal(category.categoryName, category.categoryBudget),\n                   () => deleteCategory(category.categoryName), true)}\n            </div>\n        )\n    })\n\n    const totalCatBudget = allCategories?.reduce( (acc, obj) => {\n        return acc + obj.categoryBudget\n    }, 0);\n\n    const totalCatCard = () => {\n        return (\n            <div>\n                {CategoryCard(\"All Categories\", totalCatBudget, budget,null, null, false)}\n            </div>\n        )\n    }\n\n\n\n\n    return (\n        <Container className={\"pt-4\"}>\n            <Stack direction={\"horizontal\"} gap={2} className={\"mb-4\"}>\n                <Stack direction={\"vertical\"} gap={2}>\n                    <h2 className={\"me-auto\"}>Categories</h2>\n                    <h6>Hi {username}, Below is an overview of your categories.</h6>\n                    <div>\n                        <Button color={\"info\"} onClick={() => setCreateModal(true)}>Create Category</Button>\n                    </div>\n                </Stack>\n                <Stack direction={\"vertical\"} gap={2} >\n                    <Stack direction={\"horizontal\"} gap={2} className={\"ms-auto\"}>\n                        <ProfileButton />\n                        <SignoutButton />\n                    </Stack>\n                    <Stack className={\"ms-auto\"}>\n                        <ExpenseButton />\n                    </Stack>\n                </Stack>\n                <div>\n                </div>\n            </Stack>\n            <div style={{display:\"grid\", gridTemplateColumns: \"repeat(auto-fill, minmax(500px,1fr))\", gap: \"1rem\",\n                alignItems: \"flex-start\"}}>\n                {categoryCards}\n            </div>\n            <div className={\"mt-4\"}>\n                {totalCatCard()}\n            </div>\n            {budget === \"null\" && (\n                <div className={\"float-end pt-3\"} >\n                    <p >Looks like you do not have any budget defined. Update your budget from the profile page. </p>\n                </div>\n\n            )}\n\n            {CreateCategoryModal(createModal, () => setCreateModal(false))}\n            {UpdateCategoryModal(updateModal, ()=> setUpdateModal(false),\n                selectedCategoryName, selectedCategoryBudget)}\n        </Container>\n    )\n}\n\nexport default Category;","/Users/pooja/lambda/Spring Projects/expensetracker/expenseapp/src/components/Category/CategoryButton.js",[],[],"/Users/pooja/lambda/Spring Projects/expensetracker/expenseapp/src/components/Expense/ExpenseButton.js",[],[],"/Users/pooja/lambda/Spring Projects/expensetracker/expenseapp/src/components/Profile/ProfileButton.js",[],[],"/Users/pooja/lambda/Spring Projects/expensetracker/expenseapp/src/components/Category/CategoryCard.js",["157","158"],[],"import React, {useState} from \"react\";\nimport {Button, Card, ProgressBar, Stack} from \"react-bootstrap\";\nimport {currencyFormatter} from \"../utils/utils\";\nimport UpdateCategoryModal from \"./UpdateCategoryModal\";\n\n\nconst CategoryCard = (categoryName, categoryBudget, totalBudget, onUpdateCategoryClick, onDeleteCategoryClick, showButton) => {\n    const getProgressBarVariant = (amount, max) => {\n        const ratio = amount/max;\n        if(ratio < 0.5)\n            return \"primary\"\n        if(ratio < 0.75)\n            return \"warning\"\n        else\n            return \"danger\"\n    }\n\n\n    return (\n        <Card>\n            <Card.Body>\n                <Card.Title className={\"d-flex justify-content-between align-items-baseline fw-normal mb-3\"}>\n                    <div className={\"me-2\"}>{categoryName}</div>\n                    <div className={\"d-flex align-items-baseline\"}>{currencyFormatter.format(categoryBudget)}\n                        <span className={\"text-muted fs-6 ms-1\"}> / {currencyFormatter.format(totalBudget)} </span></div>\n                </Card.Title>\n                <ProgressBar className={\"rounder-pill\"} variant={getProgressBarVariant(categoryBudget, totalBudget)}\n                min={0} now={categoryBudget} max={totalBudget}/>\n                {showButton && (\n                    <Stack direction={\"horizontal\"} gap={2} className={\"mt-4\"}>\n                        <Button variant={\"info\"} className={\"ms-auto\"} onClick={onUpdateCategoryClick}>Update Category</Button>\n                        <Button variant={\"outline-danger\"} onClick={onDeleteCategoryClick}>Delete Category</Button>\n                    </Stack>\n                )}\n\n            </Card.Body>\n        </Card>\n    )\n}\n\n\nexport default CategoryCard;\n","/Users/pooja/lambda/Spring Projects/expensetracker/expenseapp/src/components/utils/utils.js",[],[],"/Users/pooja/lambda/Spring Projects/expensetracker/expenseapp/src/components/Category/CreateCategoryModal.js",["159","160"],[],"import React, {useState} from \"react\";\nimport {Button, Form, FormControl, FormGroup, FormLabel, Modal} from \"react-bootstrap\";\nimport axios from \"axios\";\nimport AuthService from \"../../services/auth.service\";\nimport {Input, Label} from \"reactstrap\";\n\nconst CreateCategoryModal = (show, handleClose) => {\n    const [selectedCategory, setSelectedCategory] = useState({categoryName: '', categoryBudget: ''});\n\n    const onCreateChange = (event) => {\n        event.preventDefault();\n        const value = event.target.value;\n        const name = event.target.name;\n        let categoryChange = {...selectedCategory};\n        categoryChange[name] = value;\n        setSelectedCategory(categoryChange);\n    }\n\n    const createCategory = (event) => {\n        event.preventDefault();\n        const catName = selectedCategory.categoryName;\n        const catBudget = selectedCategory.categoryBudget;\n        const username = AuthService.getCurrentUser();\n        const token = AuthService.getToken();\n\n        const requestHeader = {\n            headers : {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": \"Bearer \" + token\n            }\n        }\n\n        const url = `/${username}/category`;\n\n        const requestBody = {\n            \"categoryName\": catName,\n            \"categoryBudget\": catBudget\n        }\n\n        axios.post(url, requestBody, requestHeader).then(response => {\n            console.log(response.data);\n            handleClose();\n            window.location.reload();\n        }).catch(error => {\n            console.log(error.message);\n        })\n    }\n\n\n    return (\n        <div>\n            <Modal show={show} onHide={handleClose}>\n                <Form onSubmit={createCategory}>\n                    <Modal.Header closeButton>\n                        <Modal.Title>New Category</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <FormGroup className={\"mb-3\"} controlId={\"name\"}>\n                            <Label htmlFor={\"categoryName\"}>Category Name</Label>\n                            <Input type={\"text\"} name={\"categoryName\"} id={\"categoryName\"}\n                                   defaultValue={selectedCategory.categoryName} required={true} onChange={onCreateChange} />\n                        </FormGroup>\n                        <FormGroup className={\"mb-3\"} controlId={\"budget\"}>\n                            <Label htmlFor={\"categoryBudget\"}>Category Budget</Label>\n                            <Input type={\"number\"} name={\"categoryBudget\"} id={\"categoryBudget\"}\n                                   defaultValue={selectedCategory.categoryBudget} required={true} onChange={onCreateChange} />\n                        </FormGroup>\n                        <div className={\"d-flex justify-content-end\"}>\n                            <Button type={\"submit\"} variant={\"outline-success\"}>Create Category</Button>\n                        </div>\n                    </Modal.Body>\n\n                </Form>\n\n            </Modal>\n        </div>\n    )\n}\n\nexport default CreateCategoryModal;","/Users/pooja/lambda/Spring Projects/expensetracker/expenseapp/src/components/Category/UpdateCategoryModal.js",["161"],[],"import React, {useState} from \"react\";\nimport AuthService from \"../../services/auth.service\";\nimport axios from \"axios\";\nimport {Button, Form, FormGroup, Modal} from \"react-bootstrap\";\nimport {Input, Label} from \"reactstrap\";\n\nconst UpdateCategoryModal = (show, handleClose, catName, catBudget) => {\n\n    const updateCategory = (event) => {\n        event.preventDefault();\n        const username = AuthService.getCurrentUser();\n        const token = AuthService.getToken();\n        console.log(\"Updating category....\");\n        const requestHeader = {\n            headers : {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": \"Bearer \" + token\n            }\n        }\n\n        const catGName = catName\n        const catGBudget = catBudget.toString();\n\n        const url = `/${username}/category/${catGName}`;\n\n        const requestBody = {\n            \"budget\": catGBudget\n        }\n\n        axios.put(url, requestBody, requestHeader).then(response => {\n            console.log(response.data);\n            handleClose();\n            window.location.reload();\n        }).catch(error => {\n            console.log(error.message);\n        })\n    }\n\n    return (\n        <div>\n            <Modal show={show} onHide={handleClose}>\n                <Form onSubmit={updateCategory}>\n                    <Modal.Header closeButton>\n                        <Modal.Title>Update Category</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <FormGroup className={\"mb-3\"} controlId={\"name\"}>\n                            <Label htmlFor={\"categoryName\"}>Category Name</Label>\n                            <Input type={\"text\"} name={\"categoryName\"} id={\"categoryName\"}\n                                   value={catName} required={true} readOnly={true} />\n                        </FormGroup>\n                        <FormGroup className={\"mb-3\"} controlId={\"budget\"}>\n                            <Label htmlFor={\"categoryBudget\"}>Category Budget</Label>\n                            <Input type={\"number\"} name={\"categoryBudget\"} id={\"categoryBudget\"}\n                                   defaultValue={catBudget} required={true} onChange={(event) => catBudget = event.target.value} />\n                        </FormGroup>\n                        <div className={\"d-flex justify-content-end\"}>\n                            <Button type={\"submit\"} variant={\"outline-success\"}>Update Category</Button>\n                        </div>\n                    </Modal.Body>\n\n                </Form>\n\n            </Modal>\n        </div>\n    )\n}\n\nexport default UpdateCategoryModal;","/Users/pooja/lambda/Spring Projects/expensetracker/expenseapp/src/components/Expense/Expense.js",["162","163","164","165","166","167","168","169","170"],[],"import React, {useState, useEffect} from \"react\";\nimport AuthService from \"../../services/auth.service\";\nimport axios from \"axios\";\nimport {Container, Stack} from \"react-bootstrap\";\nimport ExpenseCard from \"./ExpenseCard\";\nimport CategoryCard from \"../Category/CategoryCard\";\nimport ProfileButton from \"../Profile/ProfileButton\";\nimport CategoryButton from \"../Category/CategoryButton\";\nimport {Button} from \"reactstrap\";\nimport CreateExpenseModal from \"./CreateExpenseModal\";\nimport ViewExpenseModal from \"./ViewExpenseModal\";\nimport SignoutButton from \"../NavBar/SignoutButton\";\nimport ExpenseButton from \"./ExpenseButton\";\n\nconst Expense = (props) => {\n    const [username, setUsername] = useState('');\n    const [token, setToken] = useState('');\n    const [allExpenses, setAllExpenses] = useState([]);\n    const [budget, setBudget] = useState('');\n    const [allCategories, setAllCategories] = useState([]);\n    const [expenseGroupByCategory, setExpenseGroupByCategory] = useState({});\n    const [loading, isLoading] = useState(true);\n    const [createExpenseModal, setCreateExpenseModal] = useState(false)\n    const [viewExpenseModal, setViewExpenseModal] = useState(false);\n    const [viewCategoryName, setViewCategoryName] = useState(false);\n    const [dropdownCategories, setDropdownCategories] = useState([]);\n    const [sumExpense, setSumExpense] = useState(0);\n\n    useEffect(() => {\n        getAllExpenses();\n        getAllCategories();\n    },[]);\n\n    const getAllExpenses = () => {\n        const token = AuthService.getToken();\n        const username = AuthService.getCurrentUser();\n        const budget = AuthService.getTotalBudget();\n        setUsername(username);\n        setToken(token);\n        setBudget(budget);\n\n        const requestHeader = {\n            headers : {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": \"Bearer \" + token\n            }\n        }\n\n        const url = `/${username}/expense`;\n\n        axios.get(url, requestHeader).then(response => {\n            console.log(response.data);\n            setAllExpenses(response.data);\n            return response.data\n        }).catch(error => {\n            console.log(error.message);\n        }).then(response => response.reduce((acc,d) => {\n            if(Object.keys(acc).includes(d.categoryName)) return acc;\n            acc[d.categoryName] = response.filter(name => name.categoryName === d.categoryName);\n            return acc;\n        }, {})).then(result => setExpenseGroupByCategory(result));\n\n    }\n\n    const getAllCategories = () => {\n        const token = AuthService.getToken();\n        const username = AuthService.getCurrentUser();\n\n        const requestHeader = {\n            headers : {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": \"Bearer \" + token\n            }\n        }\n\n        const url = `/${username}/category`;\n\n        axios.get(url, requestHeader).then(response => {\n            console.log(response.data);\n            setAllCategories(response.data);\n            return response.data;\n        }).catch(error => {\n            console.log(error.message);\n        })\n    }\n\n    const openAddExpenseModal = (event, catName) => {\n        event.preventDefault();\n        const catSelected = allCategories.filter(cat => cat.categoryName == catName);\n        setDropdownCategories(catSelected);\n        setCreateExpenseModal(true);\n    }\n\n    const openAddExpenseModalAllCategories = () => {\n        setDropdownCategories(allCategories);\n        setCreateExpenseModal(true);\n    }\n\n    const openViewExpenseModal = (event, catName) => {\n        event.preventDefault();\n        setViewCategoryName(catName);\n        setViewExpenseModal(true);\n    }\n\n    const eCards =  Object.keys(expenseGroupByCategory).map(key => {\n        const catName = key;\n        const catTotalBudget = allCategories.filter(cat =>  {\n            return cat.categoryName == catName\n        });\n        //TODO Loading\n        if(catTotalBudget[0] === undefined || catTotalBudget == null) {\n            return (\n                <div>\n                    <p>Loading.....</p>\n                </div>\n            )\n        }\n        const categoryTotalBudget = catTotalBudget[0][\"categoryBudget\"];\n        const expenses = expenseGroupByCategory[key].reduce((acc,obj) => {\n            return acc + obj.amount\n        }, 0);\n\n        return (\n            <div>\n                {ExpenseCard(catName,expenses,categoryTotalBudget,\n                    (event) => openAddExpenseModal(event, catName), (event) => openViewExpenseModal(event, catName), true )}\n            </div>\n        )\n\n    })\n\n    const totalExpenseCard = () => {\n        let sum = allExpenses.reduce((acc,obj) => {\n            return acc + obj.amount\n        }, 0);\n        return (\n            <div>\n                {ExpenseCard(\"All Expenses\", sum, AuthService.getTotalBudget(),\n                    (event) => event.preventDefault(), (event) => event.preventDefault(), false )}\n            </div>\n        )\n    }\n\n\n    return (\n        <Container className={\"pt-4\"}>\n            <Stack direction={\"horizontal\"} gap={2} className={\"mb-4\"}>\n                <Stack direction={\"vertical\"}>\n                    <h2 className={\"me-auto\"}>Expenses</h2>\n                    <h6>Hi {username}, Below is an overview of your expenses.</h6>\n                    <div>\n                        <Button color={\"info\"} onClick={openAddExpenseModalAllCategories}>Add Expense</Button>\n                    </div>\n                </Stack>\n                <Stack direction={\"vertical\"} gap={2}>\n                    <Stack direction={\"horizontal\"} gap={2} className={\"ms-auto\"}>\n                        <ProfileButton />\n                        <SignoutButton />\n                    </Stack>\n                    <Stack className={\"ms-auto\"}>\n                        <CategoryButton />\n                    </Stack>\n                </Stack>\n            </Stack>\n            <div style={{display:\"grid\", gridTemplateColumns: \"repeat(auto-fill, minmax(500px,1fr))\", gap: \"1rem\",\n                alignItems: \"flex-start\"}}>\n                {eCards}\n\n            </div>\n            <div className={\"mt-4\"}>\n                {totalExpenseCard()}\n            </div>\n            {budget === \"null\" && (\n                <div className={\"float-end pt-3\"} >\n                    <p >Looks like you do not have any budget defined. Update your budget from the profile page. </p>\n                </div>\n\n            )}\n            {CreateExpenseModal(createExpenseModal, () => setCreateExpenseModal(false), dropdownCategories)}\n            {ViewExpenseModal(viewExpenseModal, () => setViewExpenseModal(false), expenseGroupByCategory[viewCategoryName], viewCategoryName)}\n        </Container>\n    )\n}\n\nexport default Expense;","/Users/pooja/lambda/Spring Projects/expensetracker/expenseapp/src/components/Expense/ExpenseCard.js",[],[],"/Users/pooja/lambda/Spring Projects/expensetracker/expenseapp/src/components/Expense/CreateExpenseModal.js",["171"],[],"import React, {useState, useEffect} from \"react\";\nimport axios from \"axios\";\nimport AuthService from \"../../services/auth.service\";\nimport {Button, Form, FormGroup, Modal} from \"react-bootstrap\";\nimport {Input, Label} from \"reactstrap\";\n\nconst CreateExpenseModal = (show, handleClose, categories) => {\n    const [expense, setExpense] = useState({expenseDate: '', description: '', merchant: '', amount: 0.00});\n    const [categoryName, setCategoryName] = useState('');\n/*\n    useEffect(() => {\n        if(categories[0][\"categoryName\"] !== undefined) {\n            setCategoryName(categories[0][\"categoryName\"]);\n        }\n    }, [])*/\n\n    const onCreateChange = (event) => {\n        event.preventDefault();\n        const value = event.target.value;\n        const name = event.target.name;\n        let expenseChange = {...expense};\n        expenseChange[name] = value;\n        setExpense(expenseChange);\n    }\n\n    const createExpense = (event) => {\n        event.preventDefault();\n        const username = AuthService.getCurrentUser();\n        const token = AuthService.getToken();\n        const requestHeader = {\n            headers : {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": \"Bearer \" + token\n            }\n        }\n        const url = `/${username}/expense`;\n\n        const requestBody = {\n            \"expenseDate\": expense.expenseDate,\n            \"description\": expense.description,\n            \"amount\": expense.amount,\n            \"categoryName\": categoryName,\n            \"merchant\": expense.merchant\n        }\n\n        axios.post(url, requestBody, requestHeader).then(response => {\n            console.log(response.data);\n            handleClose();\n            window.location.reload();\n        }).catch(error => {\n            console.log(error.message);\n        })\n    }\n\n    return (\n        <div>\n            <Modal show={show} onHide={handleClose}>\n                <Form onSubmit={createExpense}>\n                    <Modal.Header closeButton>\n                        <Modal.Title>New Expense</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <FormGroup className={\"mb-3\"} controlId={\"expenseDate\"}>\n                            <Label htmlFor={\"expenseDate\"}>Expense Date</Label>\n                            <Input type={\"date\"} name={\"expenseDate\"} id={\"expenseDate\"}\n                                   defaultValue={expense.expenseDate} required={true} onChange={onCreateChange} />\n                        </FormGroup>\n                        <FormGroup className={\"mb-3\"} controlId={\"description\"}>\n                            <Label htmlFor={\"description\"}>Description</Label>\n                            <Input type={\"text\"} name={\"description\"} id={\"description\"}\n                                   defaultValue={expense.description} onChange={onCreateChange} />\n                        </FormGroup>\n                        <FormGroup className={\"mb-3\"} controlId={\"merchant\"}>\n                            <Label htmlFor={\"merchant\"}>Merchant</Label>\n                            <Input type={\"text\"} name={\"merchant\"} id={\"merchant\"}\n                                   defaultValue={expense.merchant} onChange={onCreateChange} />\n                        </FormGroup>\n                        <FormGroup className={\"mb-3\"} controlId={\"amount\"}>\n                            <Label htmlFor={\"amount\"}>Amount</Label>\n                            <Input type={\"number\"} name={\"amount\"} id={\"amount\"}\n                                   defaultValue={expense.amount} required={true} onChange={onCreateChange} />\n                        </FormGroup>\n                        {/*<FormGroup className={\"mb-3\"} controlId={\"categoryName\"}>\n                            <Label htmlFor={\"categoryName\"}>Category</Label>\n                            <Input type={\"text\"} name={\"categoryName\"} id={\"categoryName\"}\n                                   defaultValue={expense.categoryName} required={true} onChange={onCreateChange} />\n                        </FormGroup>*/}\n                        <FormGroup className={\"mb-3\"} controlId={\"categoryName\"}>\n                            <Label htmlFor={\"categoryName\"}>Category</Label>\n                            <Form.Control as={\"select\"} className={\"rounded-0 shadow\"} id={\"categoryName\"}\n                                          required={true} onChange={event => {\n                                              setCategoryName(event.target.value)\n                            }}>\n                                <option key={\"blank\"}> </option>\n                                {categories.map(opt => (\n                                    <option key={opt.categoryName}>{opt.categoryName}</option>\n                                ))}\n                            </Form.Control>\n                        </FormGroup>\n                        <div className={\"d-flex justify-content-end\"}>\n                            <Button type={\"submit\"} variant={\"outline-success\"}>Create Expense</Button>\n                        </div>\n                    </Modal.Body>\n\n                </Form>\n\n            </Modal>\n        </div>\n    )\n\n\n}\n\nexport default CreateExpenseModal;","/Users/pooja/lambda/Spring Projects/expensetracker/expenseapp/src/components/Expense/ViewExpenseModal.js",["172","173"],[],"import {currencyFormatter, dateFormatter} from \"../utils/utils\";\nimport {Button, Modal, Stack, Table, Form, FormGroup} from \"react-bootstrap\";\nimport React, {useState} from \"react\";\nimport AuthService from \"../../services/auth.service\";\nimport axios from \"axios\";\nimport {Input, Label} from \"reactstrap\";\n\n\nconst ViewExpenseModal = (show, handleClose, expenses, categoryName) => {\n    const [showUpdateForm, setShowUpdateForm] = useState(false);\n    const [exp, setExp] = useState({});\n\n    const generateRows = expenses?.map(exp => {\n        console.log(exp);\n        console.log(new Date(exp.expenseDate).toISOString());\n        return (\n            <Stack direction={\"horizontal\"} gap={2} key={exp.expenseId}>\n                <div className={\"fs-5\"}>{exp.description}</div>\n                <div className=\"fs-6\">{currencyFormatter.format(exp.amount)}</div>\n                <div className=\"fs-6\">{new Date(exp.expenseDate).toISOString().substring(0,10)}</div>\n            </Stack>\n        )\n    })\n\n    const deleteExpense = (expenseId) => {\n\n        const username = AuthService.getCurrentUser();\n        const token = AuthService.getToken();\n        console.log(\"Deleting expense....\");\n\n        const requestHeader = {\n            headers : {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": \"Bearer \" + token\n            }\n        }\n\n        const url = `/${username}/expense/${expenseId}`;\n\n        axios.delete(url, requestHeader).then(response => {\n            console.log(response.data);\n            handleClose();\n            window.location.reload();\n        }).catch(error => {\n            console.log(error.message);\n        })\n    }\n\n    const updateExpense = (exp) => {\n        setShowUpdateForm(true);\n        setExp(exp);\n    }\n\n    let count = 0;\n\n   const rowsTable = expenses?.map(exp => {\n      count += 1;\n       return (\n           <tr>\n               <td>{count}</td>\n               <td>{exp.description}</td>\n               <td>{currencyFormatter.format(exp.amount)}</td>\n               <td>{new Date(exp.expenseDate).toISOString().substring(0,10)}</td>\n               <td><Button variant={\"info\"} size={\"sm\"} onClick={() => updateExpense(exp)}>Update Expense</Button></td>\n               <td><Button variant={\"outline-danger\"} size={\"sm\"} onClick={() => deleteExpense(exp.expenseId)}>Delete Expense</Button></td>\n           </tr>\n       )\n   })\n\n    const updateSubmit = (expense) => {\n        const username = AuthService.getCurrentUser();\n        const token = AuthService.getToken();\n        const requestHeader = {\n            headers : {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": \"Bearer \" + token\n            }\n        }\n\n        const requestBody = {\n            \"expenseDate\": expense.expenseDate,\n            \"description\": expense.description,\n            \"amount\": expense.amount,\n            \"categoryName\": expense.categoryName,\n            \"merchant\": expense.merchant\n        }\n\n        const url = `/${username}/expense/${expense.expenseId}`;\n\n        axios.put(url, requestBody, requestHeader).then(response => {\n            console.log(response.data);\n            handleClose();\n            window.location.reload();\n        }).catch(error => {\n            console.log(error.message);\n        })\n\n\n    }\n\n    const updateForm = (expense) => {\n       if(showUpdateForm) {\n           return (\n               <Form onSubmit={() => updateSubmit(expense)}>\n                   <FormGroup className={\"mb-3\"} controlId={\"description\"}>\n                       <Label htmlFor={\"description\"}>Description</Label>\n                       <Input type={\"text\"} name={\"description\"} id={\"description\"}\n                              defaultValue={expense.description} onChange={(event) => {\n                                  expense.description = event.target.value\n                       }}/>\n                   </FormGroup>\n                   <FormGroup>\n                       <Label htmlFor={\"expenseDate\"}>Expense Date</Label>\n                       <Input type={\"date\"} name={\"expenseDate\"} id={\"expenseDate\"}\n                              defaultValue={expense.expenseDate} required={true} onChange={(event) => {\n                                expense.expenseDate = event.target.value\n                       }} />\n                   </FormGroup>\n                   <FormGroup className={\"mb-3\"} controlId={\"amount\"}>\n                       <Label htmlFor={\"amount\"}>Amount</Label>\n                       <Input type={\"number\"} name={\"amount\"} id={\"amount\"}\n                              defaultValue={expense.amount} required={true} onChange={(event) => {\n                           expense.amount = event.target.value\n                       }} />\n                   </FormGroup>\n                   <div className={\"d-flex justify-content-end\"}>\n                       <Button type={\"submit\"} variant={\"outline-success\"}>Update Expense</Button>\n                   </div>\n               </Form>\n           )\n       }\n    }\n\n\n    return (\n        <Modal show={show} onHide={handleClose}>\n            <Modal.Header closeButton>\n                <Modal.Title>\n                    <Stack direction={\"horizontal\"} gap={2}>\n                        <div>Expenses: {categoryName}</div>\n\n                    </Stack>\n                </Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                {/*<Stack direction={\"vertical\"} gap={2}>\n                    {generateRows}\n                </Stack>*/}\n                <Table bordered hover>\n                    <thead>\n                        <th>#</th>\n                        <th>Description</th>\n                        <th>Amount</th>\n                        <th>Date</th>\n                        <th>Action</th>\n                        <th>Action</th>\n                    </thead>\n                    <tbody>\n                    {rowsTable}\n                    </tbody>\n                </Table>\n                {updateForm(exp)}\n            </Modal.Body>\n        </Modal>\n    )\n}\n\nexport default ViewExpenseModal;","/Users/pooja/lambda/Spring Projects/expensetracker/expenseapp/src/components/NavBar/SignoutButton.js",[],[],{"ruleId":"174","severity":1,"message":"175","line":2,"column":24,"nodeType":"176","messageId":"177","endLine":2,"endColumn":30},{"ruleId":"174","severity":1,"message":"178","line":14,"column":12,"nodeType":"176","messageId":"177","endLine":14,"endColumn":28},{"ruleId":"179","severity":1,"message":"180","line":24,"column":18,"nodeType":"181","messageId":"182","endLine":24,"endColumn":20},{"ruleId":"179","severity":1,"message":"180","line":39,"column":35,"nodeType":"181","messageId":"182","endLine":39,"endColumn":37},{"ruleId":"174","severity":1,"message":"183","line":2,"column":9,"nodeType":"176","messageId":"177","endLine":2,"endColumn":15},{"ruleId":"174","severity":1,"message":"184","line":2,"column":17,"nodeType":"176","messageId":"177","endLine":2,"endColumn":26},{"ruleId":"174","severity":1,"message":"185","line":2,"column":28,"nodeType":"176","messageId":"177","endLine":2,"endColumn":31},{"ruleId":"174","severity":1,"message":"186","line":2,"column":33,"nodeType":"176","messageId":"177","endLine":2,"endColumn":40},{"ruleId":"174","severity":1,"message":"187","line":6,"column":8,"nodeType":"176","messageId":"177","endLine":6,"endColumn":20},{"ruleId":"174","severity":1,"message":"188","line":16,"column":11,"nodeType":"176","messageId":"177","endLine":16,"endColumn":19},{"ruleId":"174","severity":1,"message":"189","line":62,"column":11,"nodeType":"176","messageId":"177","endLine":62,"endColumn":21},{"ruleId":"190","severity":1,"message":"191","line":153,"column":21,"nodeType":"192","endLine":153,"endColumn":25},{"ruleId":"174","severity":1,"message":"193","line":95,"column":11,"nodeType":"176","messageId":"177","endLine":95,"endColumn":29},{"ruleId":"174","severity":1,"message":"194","line":4,"column":17,"nodeType":"176","messageId":"177","endLine":4,"endColumn":21},{"ruleId":"174","severity":1,"message":"195","line":4,"column":23,"nodeType":"176","messageId":"177","endLine":4,"endColumn":32},{"ruleId":"174","severity":1,"message":"196","line":4,"column":34,"nodeType":"176","messageId":"177","endLine":4,"endColumn":39},{"ruleId":"174","severity":1,"message":"197","line":4,"column":41,"nodeType":"176","messageId":"177","endLine":4,"endColumn":45},{"ruleId":"174","severity":1,"message":"198","line":4,"column":47,"nodeType":"176","messageId":"177","endLine":4,"endColumn":52},{"ruleId":"174","severity":1,"message":"199","line":4,"column":54,"nodeType":"176","messageId":"177","endLine":4,"endColumn":59},{"ruleId":"174","severity":1,"message":"200","line":17,"column":27,"nodeType":"176","messageId":"177","endLine":17,"endColumn":43},{"ruleId":"174","severity":1,"message":"201","line":19,"column":12,"nodeType":"176","messageId":"177","endLine":19,"endColumn":28},{"ruleId":"174","severity":1,"message":"202","line":80,"column":11,"nodeType":"176","messageId":"177","endLine":80,"endColumn":24},{"ruleId":"174","severity":1,"message":"203","line":1,"column":16,"nodeType":"176","messageId":"177","endLine":1,"endColumn":24},{"ruleId":"174","severity":1,"message":"204","line":4,"column":8,"nodeType":"176","messageId":"177","endLine":4,"endColumn":27},{"ruleId":"174","severity":1,"message":"205","line":2,"column":23,"nodeType":"176","messageId":"177","endLine":2,"endColumn":34},{"ruleId":"174","severity":1,"message":"206","line":2,"column":47,"nodeType":"176","messageId":"177","endLine":2,"endColumn":56},{"ruleId":"174","severity":1,"message":"203","line":1,"column":16,"nodeType":"176","messageId":"177","endLine":1,"endColumn":24},{"ruleId":"174","severity":1,"message":"207","line":6,"column":8,"nodeType":"176","messageId":"177","endLine":6,"endColumn":20},{"ruleId":"174","severity":1,"message":"208","line":13,"column":8,"nodeType":"176","messageId":"177","endLine":13,"endColumn":21},{"ruleId":"174","severity":1,"message":"209","line":17,"column":12,"nodeType":"176","messageId":"177","endLine":17,"endColumn":17},{"ruleId":"174","severity":1,"message":"210","line":22,"column":12,"nodeType":"176","messageId":"177","endLine":22,"endColumn":19},{"ruleId":"174","severity":1,"message":"211","line":22,"column":21,"nodeType":"176","messageId":"177","endLine":22,"endColumn":30},{"ruleId":"174","severity":1,"message":"212","line":27,"column":12,"nodeType":"176","messageId":"177","endLine":27,"endColumn":22},{"ruleId":"174","severity":1,"message":"213","line":27,"column":24,"nodeType":"176","messageId":"177","endLine":27,"endColumn":37},{"ruleId":"179","severity":1,"message":"180","line":89,"column":74,"nodeType":"181","messageId":"182","endLine":89,"endColumn":76},{"ruleId":"179","severity":1,"message":"180","line":108,"column":37,"nodeType":"181","messageId":"182","endLine":108,"endColumn":39},{"ruleId":"174","severity":1,"message":"214","line":1,"column":26,"nodeType":"176","messageId":"177","endLine":1,"endColumn":35},{"ruleId":"174","severity":1,"message":"215","line":1,"column":28,"nodeType":"176","messageId":"177","endLine":1,"endColumn":41},{"ruleId":"174","severity":1,"message":"216","line":13,"column":11,"nodeType":"176","messageId":"177","endLine":13,"endColumn":23},"no-unused-vars","'Switch' is defined but never used.","Identifier","unusedVar","'isAuthentication' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Navbar' is defined but never used.","'Container' is defined but never used.","'Nav' is defined but never used.","'NavLink' is defined but never used.","'SignupButton' is defined but never used.","'navigate' is assigned a value but never used.","'successful' is assigned a value but never used.","jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.","JSXOpeningElement","'handleBudgetChange' is assigned a value but never used.","'Card' is defined but never used.","'FormGroup' is defined but never used.","'Table' is defined but never used.","'Form' is defined but never used.","'Label' is defined but never used.","'Input' is defined but never used.","'setEmptyCategory' is assigned a value but never used.","'selectedCategory' is assigned a value but never used.","'clickOnCreate' is assigned a value but never used.","'useState' is defined but never used.","'UpdateCategoryModal' is defined but never used.","'FormControl' is defined but never used.","'FormLabel' is defined but never used.","'CategoryCard' is defined but never used.","'ExpenseButton' is defined but never used.","'token' is assigned a value but never used.","'loading' is assigned a value but never used.","'isLoading' is assigned a value but never used.","'sumExpense' is assigned a value but never used.","'setSumExpense' is assigned a value but never used.","'useEffect' is defined but never used.","'dateFormatter' is defined but never used.","'generateRows' is assigned a value but never used."]